makefile知识总结：

Linux GCC编译警告：Clock skew detected. 错误解决办法：
原因在于系统时间比文件修改时间早，看了下我的系统时间竟然还是2012-01-13，而今天都已经是2012-01-31呢，于是修改时间后重新编译，问题解决
https://www.cnblogs.com/jiu0821/p/6768473.html

Linux下切换root用户提示Authentication failure错误的解决方法：
sudo passwd
然后会让你输入当前用户密码
输入完后再输入root用户密码就可以了（由$变成#）

一、介绍
1.使用场景：
makefile定义了一系列的规则来指定，哪些文件需要先编译，哪些文件需要后编译，哪些文件需要重新编译，甚至于进行更复杂的功能操作，makefile带来的好处就是--“自动化编译”。

2.IDE开发环境
VC	 ------  nmake
GNU  ------  make

3.程序编译链接规则
编译：检测程序语法，和函数、变量是否被声明------obj目标文件
链接：链接函数和全局变量。链接错误：Link 2001
编译生成的中间目标文件太多，我们要给中间目标文件打个包，在Windows下这种包叫“库文件”（Library File)，也就是 .lib 。

二、编写
1.编写规则：
a.从未编译，则c文件需编译链接
b.只编译修改的c文件，并链接目标文件
c.头文件被修改，则编译引用了该头文件的c文件，并链接

2.格式target ... : prerequisites ...command......
target这一个或多个的目标文件依赖于prerequisites中的文件，其生成规则定义在command。

3.Makefile的规则
prerequisites中如果有一个以上的文件比target文件要新的话，command所定义的命令就会被执行。

4.清空文件规则
clean:rm edit $(objects)
更为稳健的做法是：
.PHONY : cleanclean :-rm edit $(objects)
.PHONY意思表示clean是一个“伪目标”，表明不管是否有这个文件，这个目标就是“伪目标”。
而在rm命令前面加了一个小减号的意思就是，也许某些文件出现问题，但不要管，继续做后面的事

三、总述 : （Makefile中的命令，必须要以[Tab]键开始)
1.包含：
a.显示规则 : 依赖文件
b.隐晦规则 ：自动推导
c.变量的定义 ： 相当于C的宏
d.文件指示 ：包含include ,#if , 定义多行的命令
e.注释 ：# 

2.include foo.make *.mk $(bar)
当前目录包含了a.mk、b.mk、c.mk，变量$(bar)，其包含了e.mk和f.mk
等价于 include foo.make a.mk b.mk c.mk e.mk f.mk

3.路径寻找顺序：
a.-I 指定目录
b.当前路径
c./include/ 一般是：/usr/local/bin或/usr/include

4.环境变量MAKEFILES: 影响大

5.工作方式
第一阶段：
1)读入所有的Makefile。
2)读入被include的其它Makefile。
3)初始化文件中的变量。
4)推导隐晦规则，并分析所有规则。
5)为所有的目标文件创建依赖关系链
第二阶段：
6)根据依赖关系，决定哪些目标要重新生成。
7)执行生成命令。

6.文件搜寻 :特殊变量“VPATH”
VPATH = src:../headers
上面的的定义指定两个目录，“src”和“../headers”，make会按照这个顺序进行搜索。目录由“冒号”分隔。

vpath %.h ../headers
该语句表示，要求make在“../headers”目录下搜索所有以“.h”结尾的文件

7.自动生成依赖性
如果你使用GNU的C/C++编译器，你得用“-MM”参数，不然，“-M”参数会把一些标准库的头文件也包含进来。
[.d]文件中就存放对应[.c]文件的依赖关系；

四、书写命令
1.显示命令：
echo 回显
@ echo 不输出命令
make 带参数 -n --just-print 只显示命令
-s --slient 全面禁止命令的显示

2.命令执行
如果你要让上一条命令的结果应用在下一条命令时，你应该使用分号分隔这两条命令

3.命令出错
-减号

4.嵌套执行make

5.定义命令包
目标文件 : 依赖文件
$@ 代表 目标文件
$^ 代表 依赖文件  

五、使用变量







