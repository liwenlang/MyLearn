//SQL使用教程

1.Windows 上安装 MySQL https://dev.mysql.com/downloads/mysql/
下载完后，我们将 zip 包解压到相应的目录，这里我将解压后的文件夹放在 C:\web\mysql-8.0.11 下。

在该文件夹下创建 my.ini 配置文件，编辑 my.ini 配置以下基本信息：

[client]
# 设置mysql客户端默认字符集
default-character-set=utf8
 
[mysqld]
# 设置3306端口
port = 3306
# 设置mysql的安装目录
basedir=C:\\web\\mysql-8.0.11
# 设置 mysql数据库的数据的存放目录，MySQL 8+ 不需要以下配置，系统自己生成即可，否则有可能报错
# datadir=C:\\web\\sqldata
# 允许最大连接数
max_connections=20
# 服务端使用的字符集默认为8比特编码的latin1字符集
character-set-server=utf8
# 创建新表时将使用的默认存储引擎
default-storage-engine=INNODB

2.初始化数据库：
进入bin, mysqld --initialize --console
记下初始密码，后续登录需要用到

3.安装命令：
mysqld install

4.启动服务：
net start mysql

5.登录本地
mysql -u root -p

6.执行命令提示密码：(参考http://blog.sina.com.cn/s/blog_768df4d70102yrqp.html)
ALTER USER USER() IDENTIFIED BY '0U0YOno#5TAe');

二：用户管理
1.添加用户

INSERT INTO user 
(host, user, authentication_string, 
select_priv, insert_priv, update_priv, ssl_cipher) 
VALUES ('localhost', 'guest', 
MD5('123'), 'Y', 'Y', 'Y', NULL);
会报错：Field 'ssl_cipher' doesn't have a default value
解决方法：
1)插入用户
create user 'liwenlang'@'localhost' identified by '123';
2)授权 
GRANT USAGE ON *.* TO 'liwenlang'@'localhost'WITH GRANT OPTION;

grant select,insert,update,delete,create,drop on *.* to 'zc'@'%' with grant option;

flush privileges

三. 操作数据库
1.show databases;
2.use mysql;
3.show tables;

//显示列属性，字段类型
desc 表名
show columns from 表名;

//显示数据表的详细索引信息，包括PRIMARY KEY（主键）
SHOW INDEX FROM 数据表:

 SHOW TABLE STATUS  FROM user;
 
 
 4.创建数据库
 create database runoob;
 
 5.删除数据库
 drop database runoob;
 
 6.选择数据库
 use runoob;
 
 四.数据类型
 分为三类：
 1）数值 INTEGER、SMALLINT、DECIMAL和NUMERIC FLOAT、REAL和DOUBLE
 2）时间日期 DATETIME、DATE、TIMESTAMP、TIME和YEAR
 3）字符串 CHAR、VARCHAR、BINARY、VARBINARY、BLOB、TEXT、ENUM和SET
 
//一个汉字占多少长度与编码有关：
UTF－8：一个汉字＝3个字节
GBK：一个汉字＝2个字节

五.操作数据表
1.CREATE TABLE IF NOT EXISTS `runoob_tbl`(
   `runoob_id` INT UNSIGNED AUTO_INCREMENT,
   `runoob_title` VARCHAR(100) NOT NULL,
   `runoob_author` VARCHAR(40) NOT NULL,
   `submission_date` DATE,
   PRIMARY KEY ( `runoob_id` )
)ENGINE=InnoDB DEFAULT CHARSET=utf8;

2.DROP TABLE runoob_tbl

3.插入行数据
INSERT INTO runoob_tbl 
(runoob_title, runoob_author, submission_date)
VALUES("学习 PHP", "菜鸟教程", NOW());

INSERT INTO runoob_tbl 
(runoob_title, runoob_author, submission_date)
VALUES("学习 MySQL", "菜鸟教程", NOW());

INSERT INTO runoob_tbl 
(runoob_title, runoob_author, submission_date)
VALUES("JAVA 教程", "RUNOOB.COM", '2016-05-06');

4.查询数据
select * from runoob_tbl;

5.where子句
like 匹配/模糊匹配，会与 % 和 _ 结合使用。
%匹配任意字符， _匹配单个字符

SELECT * from runoob_tbl  WHERE runoob_author LIKE '%COM';

6.update更新

--------------------------------------------------------------------------------------------------------------------
/* 启动MySQL */

net start mysql

 

/* 连接与断开服务器 */

mysql -h 地址 -P 端口 -u 用户名 -p 密码

 

/* 跳过权限验证登录MySQL */

mysqld --skip-grant-tables

-- 修改root密码

密码加密函数password()

update mysql.user set password=password('root');

 

SHOW PROCESSLIST -- 显示哪些线程正在运行

SHOW VARIABLES --

 

/* 数据库操作 */ ------------------

-- 查看当前数据库

    select database();

-- 显示当前时间、用户名、数据库版本

    select now(), user(), version();

-- 创建库

    create database[ if not exists] 数据库名 数据库选项

    数据库选项：

        CHARACTER SET charset_name

        COLLATE collation_name

-- 查看已有库

    show databases[ like 'pattern']

-- 查看当前库信息

    show create database 数据库名

-- 修改库的选项信息

    alter database 库名 选项信息

-- 删除库

    drop database[ if exists] 数据库名

        同时删除该数据库相关的目录及其目录内容

 

/* 表的操作 */ ------------------

-- 创建表

    create [temporary] table[ if not exists] [库名.]表名 ( 表的结构定义 )[ 表选项]

        每个字段必须有数据类型

        最后一个字段后不能有逗号

        temporary 临时表，会话结束时表自动消失

        对于字段的定义：

            字段名 数据类型 [NOT NULL | NULL] [DEFAULT default_value] [AUTO_INCREMENT] [UNIQUE [KEY] | [PRIMARY] KEY] [COMMENT 'string']

-- 表选项

    -- 字符集

        CHARSET = charset_name

        如果表没有设定，则使用数据库字符集

    -- 存储引擎

        ENGINE = engine_name   

        表在管理数据时采用的不同的数据结构，结构不同会导致处理方式、提供的特性操作等不同

        常见的引擎：InnoDB MyISAM Memory/Heap BDB Merge Example CSV MaxDB Archive

        不同的引擎在保存表的结构和数据时采用不同的方式

        MyISAM表文件含义：.frm表定义，.MYD表数据，.MYI表索引

        InnoDB表文件含义：.frm表定义，表空间数据和日志文件

        SHOW ENGINES -- 显示存储引擎的状态信息

        SHOW ENGINE 引擎名 {LOGS|STATUS} -- 显示存储引擎的日志或状态信息

    -- 数据文件目录

        DATA DIRECTORY = '目录'

    -- 索引文件目录

        INDEX DIRECTORY = '目录'

    -- 表注释

        COMMENT = 'string'

    -- 分区选项

        PARTITION BY ... (详细见手册)

-- 查看所有表

    SHOW TABLES[ LIKE 'pattern']

    SHOW TABLES FROM 表名

-- 查看表机构

    SHOW CREATE TABLE 表名    （信息更详细）

    DESC 表名 / DESCRIBE 表名 / EXPLAIN 表名 / SHOW COLUMNS FROM 表名 [LIKE 'PATTERN']

    SHOW TABLE STATUS [FROM db_name] [LIKE 'pattern']

-- 修改表

    -- 修改表本身的选项

        ALTER TABLE 表名 表的选项

        EG:    ALTER TABLE 表名 ENGINE=MYISAM;

    -- 对表进行重命名

        RENAME TABLE 原表名 TO 新表名

        RENAME TABLE 原表名 TO 库名.表名    （可将表移动到另一个数据库）

        -- RENAME可以交换两个表名

    -- 修改表的字段机构

        ALTER TABLE 表名 操作名

        -- 操作名

            ADD[ COLUMN] 字段名        -- 增加字段

                AFTER 字段名            -- 表示增加在该字段名后面

                FIRST                -- 表示增加在第一个

            ADD PRIMARY KEY(字段名)    -- 创建主键

            ADD UNIQUE [索引名] (字段名)-- 创建唯一索引

            ADD INDEX [索引名] (字段名)    -- 创建普通索引

            ADD

            DROP[ COLUMN] 字段名        -- 删除字段

            MODIFY[ COLUMN] 字段名 字段属性        -- 支持对字段属性进行修改，不能修改字段名(所有原有属性也需写上)

            CHANGE[ COLUMN] 原字段名 新字段名 字段属性        -- 支持对字段名修改

            DROP PRIMARY KEY    -- 删除主键(删除主键前需删除其AUTO_INCREMENT属性)

            DROP INDEX 索引名    -- 删除索引

            DROP FOREIGN KEY 外键    -- 删除外键

 

-- 删除表

    DROP TABLE[ IF EXISTS] 表名 ...

-- 清空表数据

    TRUNCATE [TABLE] 表名

-- 复制表结构

    CREATE TABLE 表名 LIKE 要复制的表名

-- 复制表结构和数据

    CREATE TABLE 表名 [AS] SELECT * FROM 要复制的表名

-- 检查表是否有错误

    CHECK TABLE tbl_name [, tbl_name] ... [option] ...

-- 优化表

    OPTIMIZE [LOCAL | NO_WRITE_TO_BINLOG] TABLE tbl_name [, tbl_name] ...

-- 修复表

    REPAIR [LOCAL | NO_WRITE_TO_BINLOG] TABLE tbl_name [, tbl_name] ... [QUICK] [EXTENDED] [USE_FRM]

-- 分析表

    ANALYZE [LOCAL | NO_WRITE_TO_BINLOG] TABLE tbl_name [, tbl_name] ...

 

 

 

/* 数据操作 */ ------------------

-- 增

    INSERT [INTO] 表名 [(字段列表)] VALUES (值列表)[, (值列表), ...]

        -- 如果要插入的值列表包含所有字段并且顺序一致，则可以省略字段列表。

        -- 可同时插入多条数据记录！

        REPLACE 与 INSERT 完全一样，可互换。

    INSERT [INTO] 表名 SET 字段名=值[, 字段名=值, ...]

-- 查

    SELECT 字段列表 FROM 表名[ 其他子句]

        -- 可来自多个表的多个字段

        -- 其他子句可以不使用

        -- 字段列表可以用*代替，表示所有字段

-- 删

    DELETE FROM 表名[ 删除条件子句]

        没有条件子句，则会删除全部

-- 改

    UPDATE 表名 SET 字段名=新值[, 字段名=新值] [更新条件]

 

/* 字符集编码 */ ------------------

-- MySQL、数据库、表、字段均可设置编码

-- 数据编码与客户端编码不需一致

SHOW VARIABLES LIKE 'character_set_%'    -- 查看所有字符集编码项

    character_set_client        客户端向服务器发送数据时使用的编码

    character_set_results        服务器端将结果返回给客户端所使用的编码

    character_set_connection    连接层编码

SET 变量名 = 变量值

    set character_set_client = gbk;

    set character_set_results = gbk;

    set character_set_connection = gbk;

SET NAMES GBK;    -- 相当于完成以上三个设置

-- 校对集

    校对集用以排序

    SHOW CHARACTER SET [LIKE 'pattern']/SHOW CHARSET [LIKE 'pattern']    查看所有字符集

    SHOW COLLATION [LIKE 'pattern']        查看所有校对集

    charset 字符集编码        设置字符集编码

    collate 校对集编码        设置校对集编码

 

/* 数据类型（列类型） */ ------------------

1. 数值类型

-- a. 整型 ----------

    类型            字节        范围（有符号位）

    tinyint        1字节    -128 ~ 127        无符号位：0 ~ 255

    smallint    2字节    -32768 ~ 32767

    mediumint    3字节    -8388608 ~ 8388607

    int            4字节

    bigint        8字节

 

    int(M)    M表示总位数

    - 默认存在符号位，unsigned 属性修改

    - 显示宽度，如果某个数不够定义字段时设置的位数，则前面以0补填，zerofill 属性修改

        例：int(5)    插入一个数'123'，补填后为'00123'

    - 在满足要求的情况下，越小越好。

    - 1表示bool值真，0表示bool值假。MySQL没有布尔类型，通过整型0和1表示。常用tinyint(1)表示布尔型。

 

-- b. 浮点型 ----------

    类型                字节        范围

    float(单精度)        4字节

    double(双精度)    8字节

    浮点型既支持符号位 unsigned 属性，也支持显示宽度 zerofill 属性。

        不同于整型，前后均会补填0.

    定义浮点型时，需指定总位数和小数位数。

        float(M, D)        double(M, D)

        M表示总位数，D表示小数位数。

        M和D的大小会决定浮点数的范围。不同于整型的固定范围。

        M既表示总位数（不包括小数点和正负号），也表示显示宽度（所有显示符号均包括）。

        支持科学计数法表示。

        浮点数表示近似值。

 

-- c. 定点数 ----------

    decimal    -- 可变长度

    decimal(M, D)    M也表示总位数，D表示小数位数。

    保存一个精确的数值，不会发生数据的改变，不同于浮点数的四舍五入。

    将浮点数转换为字符串来保存，每9位数字保存为4个字节。

 

2. 字符串类型

-- a. char, varchar ----------

    char    定长字符串，速度快，但浪费空间

    varchar    变长字符串，速度慢，但节省空间

    M表示能存储的最大长度，此长度是字符数，非字节数。

    不同的编码，所占用的空间不同。

    char,最多255个字符，与编码无关。

    varchar,最多65535字符，与编码有关。

    一条有效记录最大不能超过65535个字节。

        utf8 最大为21844个字符，gbk 最大为32766个字符，latin1 最大为65532个字符

    varchar 是变长的，需要利用存储空间保存 varchar 的长度，如果数据小于255个字节，则采用一个字节来保存长度，反之需要两个字节来保存。

    varchar 的最大有效长度由最大行大小和使用的字符集确定。

    最大有效长度是65532字节，因为在varchar存字符串时，第一个字节是空的，不存在任何数据，然后还需两个字节来存放字符串的长度，所以有效长度是64432-1-2=65532字节。

    例：若一个表定义为 CREATE TABLE tb(c1 int, c2 char(30), c3 varchar(N)) charset=utf8; 问N的最大值是多少？ 答：(65535-1-2-4-30*3)/3

 

-- b. blob, text ----------

    blob 二进制字符串（字节字符串）

        tinyblob, blob, mediumblob, longblob

    text 非二进制字符串（字符字符串）

        tinytext, text, mediumtext, longtext

    text 在定义时，不需要定义长度，也不会计算总长度。

    text 类型在定义时，不可给default值

 

-- c. binary, varbinary ----------

    类似于char和varchar，用于保存二进制字符串，也就是保存字节字符串而非字符字符串。

    char, varchar, text 对应 binary, varbinary, blob.

 

3. 日期时间类型

    一般用整型保存时间戳，因为PHP可以很方便的将时间戳进行格式化。

    datetime    8字节    日期及时间        1000-01-01 00:00:00 到 9999-12-31 23:59:59

    date        3字节    日期            1000-01-01 到 9999-12-31

    timestamp    4字节    时间戳        19700101000000 到 2038-01-19 03:14:07

    time        3字节    时间            -838:59:59 到 838:59:59

    year        1字节    年份            1901 - 2155

   

datetime    “YYYY-MM-DD hh:mm:ss”

timestamp    “YY-MM-DD hh:mm:ss”

            “YYYYMMDDhhmmss”

            “YYMMDDhhmmss”

            YYYYMMDDhhmmss

            YYMMDDhhmmss

date        “YYYY-MM-DD”

            “YY-MM-DD”

            “YYYYMMDD”

            “YYMMDD”

            YYYYMMDD

            YYMMDD

time        “hh:mm:ss”

            “hhmmss”

            hhmmss

year        “YYYY”

            “YY”

            YYYY

            YY

 

4. 枚举和集合

-- 枚举(enum) ----------

enum(val1, val2, val3...)

    在已知的值中进行单选。最大数量为65535.

    枚举值在保存时，以2个字节的整型(smallint)保存。每个枚举值，按保存的位置顺序，从1开始逐一递增。

    表现为字符串类型，存储却是整型。

    NULL值的索引是NULL。

    空字符串错误值的索引值是0。

 

-- 集合（set） ----------

set(val1, val2, val3...)

    create table tab ( gender set('男', '女', '无') );

    insert into tab values ('男, 女');

    最多可以有64个不同的成员。以bigint存储，共8个字节。采取位运算的形式。

    当创建表时，SET成员值的尾部空格将自动被删除。

 

/* 选择类型 */

-- PHP角度

1. 功能满足

2. 存储空间尽量小，处理效率更高

3. 考虑兼容问题

 

-- IP存储 ----------

1. 只需存储，可用字符串

2. 如果需计算，查找等，可存储为4个字节的无符号int，即unsigned

    1) PHP函数转换

        ip2long可转换为整型，但会出现携带符号问题。需格式化为无符号的整型。

        利用sprintf函数格式化字符串

        sprintf("%u", ip2long('192.168.3.134'));

        然后用long2ip将整型转回IP字符串

    2) MySQL函数转换(无符号整型，UNSIGNED)

        INET_ATON('127.0.0.1') 将IP转为整型

        INET_NTOA(2130706433) 将整型转为IP

        

 

 

 

/* 列属性（列约束） */ ------------------

1. 主键

    - 能唯一标识记录的字段，可以作为主键。

    - 一个表只能有一个主键。

    - 主键具有唯一性。

    - 声明字段时，用 primary key 标识。

        也可以在字段列表之后声明

            例：create table tab ( id int, stu varchar(10), primary key (id));

    - 主键字段的值不能为null。

    - 主键可以由多个字段共同组成。此时需要在字段列表后声明的方法。

        例：create table tab ( id int, stu varchar(10), age int, primary key (stu, age));

 

2. unique 唯一索引（唯一约束）

    使得某字段的值也不能重复。

   

3. null 约束

    null不是数据类型，是列的一个属性。

    表示当前列是否可以为null，表示什么都没有。

    null, 允许为空。默认。

    not null, 不允许为空。

    insert into tab values (null, 'val');

        -- 此时表示将第一个字段的值设为null, 取决于该字段是否允许为null

   

4. default 默认值属性

    当前字段的默认值。

    insert into tab values (default, 'val');    -- 此时表示强制使用默认值。

    create table tab ( add_time timestamp default current_timestamp );

        -- 表示将当前时间的时间戳设为默认值。

        current_date, current_time

 

5. auto_increment 自动增长约束

    自动增长必须为索引（主键或unique）

    只能存在一个字段为自动增长。

    默认为1开始自动增长。可以通过表属性 auto_increment = x进行设置，或 alter table tbl auto_increment = x;

 

6. comment 注释

    例：create table tab ( id int ) comment '注释内容';

 

7. foreign key 外键约束

    用于限制主表与从表数据完整性。

    alter table t1 add constraint `t1_t2_fk` foreign key (t1_id) references t2(id);

        -- 将表t1的t1_id外键关联到表t2的id字段。

        -- 每个外键都有一个名字，可以通过 constraint 指定

 

    存在外键的表，称之为从表（子表），外键指向的表，称之为主表（父表）。

 

    作用：保持数据一致性，完整性，主要目的是控制存储在外键表（从表）中的数据。

 

    MySQL中，可以对InnoDB引擎使用外键约束：

    语法：

    foreign key (外键字段） references 主表名 (关联字段) [主表记录删除时的动作] [主表记录更新时的动作]

    此时需要检测一个从表的外键需要约束为主表的已存在的值。外键在没有关联的情况下，可以设置为null.前提是该外键列，没有not null。

 

    可以不指定主表记录更改或更新时的动作，那么此时主表的操作被拒绝。

    如果指定了 on update 或 on delete：在删除或更新时，有如下几个操作可以选择：

    1. cascade，级联操作。主表数据被更新（主键值更新），从表也被更新（外键值更新）。主表记录被删除，从表相关记录也被删除。

    2. set null，设置为null。主表数据被更新（主键值更新），从表的外键被设置为null。主表记录被删除，从表相关记录外键被设置成null。但注意，要求该外键列，没有not null属性约束。

    3. restrict，拒绝父表删除和更新。

 

    注意，外键只被InnoDB存储引擎所支持。其他引擎是不支持的。

 

 

/* 建表规范 */ ------------------

    -- Normal Format, NF

        - 每个表保存一个实体信息

        - 每个具有一个ID字段作为主键

        - ID主键 + 原子表

    -- 1NF, 第一范式

        字段不能再分，就满足第一范式。

    -- 2NF, 第二范式

        满足第一范式的前提下，不能出现部分依赖。

        消除符合主键就可以避免部分依赖。增加单列关键字。

    -- 3NF, 第三范式

        满足第二范式的前提下，不能出现传递依赖。

        某个字段依赖于主键，而有其他字段依赖于该字段。这就是传递依赖。

        将一个实体信息的数据放在一个表内实现。

 

 

/* select */ ------------------

 

select [all|distinct] select_expr from -> where -> group by [合计函数] -> having -> order by -> limit

 

a. select_expr

    -- 可以用 * 表示所有字段。

        select * from tb;

    -- 可以使用表达式（计算公式、函数调用、字段也是个表达式）

        select stu, 29+25, now() from tb;

    -- 可以为每个列使用别名。适用于简化列标识，避免多个列标识符重复。

        - 使用 as 关键字，也可省略 as.

        select stu+10 as add10 from tb;

 

b. from 子句

    用于标识查询来源。

    -- 可以为表起别名。使用as关键字。

        select * from tb1 as tt, tb2 as bb;

    -- from子句后，可以同时出现多个表。

        -- 多个表会横向叠加到一起，而数据会形成一个笛卡尔积。

        select * from tb1, tb2;

 

c. where 子句

    -- 从from获得的数据源中进行筛选。

    -- 整型1表示真，0表示假。

    -- 表达式由运算符和运算数组成。

        -- 运算数：变量（字段）、值、函数返回值

        -- 运算符：

            =, <=>, <>, !=, <=, <, >=, >, !, &&, ||,

            in (not) null, (not) like, (not) in, (not) between and, is (not), and, or, not, xor

            is/is not 加上ture/false/unknown，检验某个值的真假

            <=>与<>功能相同，<=>可用于null比较

 

d. group by 子句, 分组子句

    group by 字段/别名 [排序方式]

    分组后会进行排序。升序：ASC，降序：DESC

   

    以下[合计函数]需配合 group by 使用：

    count 返回不同的非NULL值数目    count(*)、count(字段)

    sum 求和

    max 求最大值

    min 求最小值

    avg 求平均值

    group_concat 返回带有来自一个组的连接的非NULL值的字符串结果。组内字符串连接。

 

e. having 子句，条件子句

    与 where 功能、用法相同，执行时机不同。

    where 在开始时执行检测数据，对原数据进行过滤。

    having 对筛选出的结果再次进行过滤。

    having 字段必须是查询出来的，where 字段必须是数据表存在的。

    where 不可以使用字段的别名，having 可以。因为执行WHERE代码时，可能尚未确定列值。

    where 不可以使用合计函数。一般需用合计函数才会用 having

    SQL标准要求HAVING必须引用GROUP BY子句中的列或用于合计函数中的列。

 

f. order by 子句，排序子句

    order by 排序字段/别名 排序方式 [,排序字段/别名 排序方式]...

    升序：ASC，降序：DESC

    支持多个字段的排序。

 

g. limit 子句，限制结果数量子句

    仅对处理好的结果进行数量限制。将处理好的结果的看作是一个集合，按照记录出现的顺序，索引从0开始。

    limit 起始位置, 获取条数

    省略第一个参数，表示从索引0开始。limit 获取条数

 

h. distinct, all 选项

    distinct 去除重复记录

    默认为 all, 全部记录

 

 

/* UNION */ ------------------

    将多个select查询的结果组合成一个结果集合。

    SELECT ... UNION [ALL|DISTINCT] SELECT ...

    默认 DISTINCT 方式，即所有返回的行都是唯一的

    建议，对每个SELECT查询加上小括号包裹。

    ORDER BY 排序时，需加上 LIMIT 进行结合。

    需要各select查询的字段数量一样。

    每个select查询的字段列表(数量、类型)应一致，因为结果中的字段名以第一条select语句为准。

 

 

/* 子查询 */ ------------------

    - 子查询需用括号包裹。

-- from型

    from后要求是一个表，必须给子查询结果取个别名。

    - 简化每个查询内的条件。

    - from型需将结果生成一个临时表格，可用以原表的锁定的释放。

    - 子查询返回一个表，表型子查询。

    select * from (select * from tb where id>0) as subfrom where id>1;

-- where型

    - 子查询返回一个值，标量子查询。

    - 不需要给子查询取别名。

    - where子查询内的表，不能直接用以更新。

    select * from tb where money = (select max(money) from tb);

    -- 列子查询

        如果子查询结果返回的是一列。

        使用 in 或 not in 完成查询

        exists 和 not exists 条件

            如果子查询返回数据，则返回1或0。常用于判断条件。

            select column1 from t1 where exists (select * from t2);

    -- 行子查询

        查询条件是一个行。

        select * from t1 where (id, gender) in (select id, gender from t2);

        行构造符：(col1, col2, ...) 或 ROW(col1, col2, ...)

        行构造符通常用于与对能返回两个或两个以上列的子查询进行比较。
