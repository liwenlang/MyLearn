
七、环境变量
make运行时的系统环境变量可以在make开始运行时被载入到Makefile文件中，但是如果Makefile中已定义了这个变量，或是这个变量由make命令行带入，那么系统的环境变量的值将被覆盖。（如果make指定了“-e”参数，那么，系统环境变量将覆盖Makefile中定义的变量）
因此，如果我们在环境变量中设置了“CFLAGS”环境变量，那么我们就可以在所有的Makefile中使用这个变量了。这对于我们使用统一的编译参数有比较大的好处。如果Makefile中定义了CFLAGS，那么则会使用Makefile中的这个变量，如果没有定义则使用系统环境变量的值，一个共性和个性的统一，很像“全局变量”和“局部变量”的特性。
当make嵌套调用时（参见前面的“嵌套调用”章节），上层Makefile中定义的变量会以系统环境变量的方式传递到下层的Makefile中。当然，默认情况下，只有通过命令行设置的变量会被传递。而定义在文件中的变量，如果要向下层Makefile传递，则需要使用exprot关键字来声明。（参见前面章节）
当然，我并不推荐把许多的变量都定义在系统环境中，这样，在我们执行不用的Makefile时，拥有的是同一套系统变量，这可能会带来更多的麻烦。
八、目标变量
前面我们所讲的在Makefile中定义的变量都是“全局变量”，在整个文件，我们都可以访问这些变量。当然，“自动化变量”除外，如“$<”等这种类量的自动化变量就属于“规则型变量”，这种变量的值依赖于规则的目标和依赖目标的定义。
当然，我样同样可以为某个目标设置局部变量，这种变量被称为“Target-specific Variable”，它可以和“全局变量”同名，因为它的作用范围只在这条规则以及连带规则中，所以其值也只在作用范围内有效。而不会影响规则链以外的全局变量的值。
其语法是：
: 
: overide 
可以是前面讲过的各种赋值表达式，如“=”、“:=”、“+=”或是“？=”。第二个语法是针对于make命令行带入的变量，或是系统环境变量。
这个特性非常的有用，当我们设置了这样一个变量，这个变量会作用到由这个目标所引发的所有的规则中去。如：
prog : CFLAGS = -g
prog : prog.o foo.o bar.o
 $(CC) $(CFLAGS) prog.o foo.o bar.o
prog.o : prog.c
 $(CC) $(CFLAGS) prog.c
foo.o : foo.c
 $(CC) $(CFLAGS) foo.c
bar.o : bar.c
 $(CC) $(CFLAGS) bar.c
在这个示例中，不管全局的$(CFLAGS)的值是什么，在prog目标，以及其所引发的所有规则中（prog.o foo.o bar.o的规则），$(CFLAGS)的值都是“-g”
九、模式变量
在GNU的make中，还支持模式变量（Pattern-specific Variable），通过上面的目标变量中，我们知道，变量可以定义在某个目标上。模式变量的好处就是，我们可以给定一种“模式”，可以把变量定义在符合这种模式的所有目标上。
我们知道，make的“模式”一般是至少含有一个“%”的，所以，我们可以以如下方式给所有以[.o]结尾的目标定义目标变量：
%.o : CFLAGS = -O
同样，模式变量的语法和“目标变量”一样：
: 
: override 
override同样是针对于系统环境传入的变量，或是make命令行指定的变量。
使用条件判断------
使用条件判断，可以让make根据运行时的不同情况选择不同的执行分支。条件表达式可以是比较变量的值，或是比较变量和常量的值。
一、示例
下面的例子，判断$(CC)变量是否“gcc”，如果是的话，则使用GNU函数编译目标。
libs_for_gcc = -lgnu
normal_libs =
foo: $(objects)
ifeq ($(CC),gcc)
$(CC) -o foo $(objects) $(libs_for_gcc)
else
$(CC) -o foo $(objects) $(normal_libs)
endif
可见，在上面示例的这个规则中，目标“foo”可以根据变量“$(CC)”值来选取不同的函数库来编译程序。
我们可以从上面的示例中看到三个关键字：ifeq、else和endif。ifeq的意思表示条件语句的开始，并指定一个条件表达式，表达式包含两个参数，以逗号分隔，表达式以圆括号括起。else表示条件表达式为假的情况。endif表示一个条件语句的结束，任何一个条件表达式都应该以endif结束。
当我们的变量$(CC)值是“gcc”时，目标foo的规则是：
foo: $(objects)$(CC) -o foo $(objects) $(libs_for_gcc)
而当我们的变量$(CC)值不是“gcc”时（比如“cc”），目标foo的规则是：
foo: $(objects)$(CC) -o foo $(objects) $(normal_libs)
当然，我们还可以把上面的那个例子写得更简洁一些：
libs_for_gcc = -lgnunormal_libs =
ifeq ($(CC),gcc)libs=$(libs_for_gcc)elselibs=$(normal_libs)endif
foo: $(objects)$(CC) -o foo $(objects) $(libs)
二、语法
条件表达式的语法为：
endif
以及：
elseendif
其中表示条件关键字，如“ifeq”。这个关键字有四个。
第一个是我们前面所见过的“ifeq”
ifeq (, ) ifeq '' '' ifeq "" "" ifeq "" '' ifeq '' "" 
比较参数“arg1”和“arg2”的值是否相同。当然，参数中我们还可以使用make的函数。如：
ifeq ($(strip $(foo)),)endif
这个示例中使用了“strip”函数，如果这个函数的返回值是空（Empty），那么就生效。
第二个条件关键字是“ifneq”。语法是：
ifneq (, ) ifneq '' '' ifneq "" "" ifneq "" '' ifneq '' "" 
其比较参数“arg1”和“arg2”的值是否相同，如果不同，则为真。和“ifeq”类似。
第三个条件关键字是“ifdef”。语法是：
ifdef 
如果变量的值非空，那到表达式为真。否则，表达式为假。当然，同样可以是一个函数的返回值。注意，ifdef只是测试一个变量是否有值，其并不会把变量扩展到当前位置。还是来看两个例子：
示例一：bar =
foo = $(bar)
ifdef foofrobozz = yes
else
frobozz = no
endif
示例二：foo =ifdef foofrobozz = yeselsefrobozz = noendif
第一个例子中，“$(frobozz)”值是“yes”，第二个则是“no”。
第四个条件关键字是“ifndef”。其语法是：
ifndef 
这个我就不多说了，和“ifdef”是相反的意思。
在这一行上，多余的空格是被允许的，但是不能以[Tab]键做为开始（不然就被认为是命令）。而注释符“#”同样也是安全的。“else”和“endif”也一样，只要不是以[Tab]键开始就行了。
特别注意的是，make是在读取Makefile时就计算条件表达式的值，并根据条件表达式的值来选择语句，所以，你最好不要把自动化变量（如“$@”等）放入条件表达式中，因为自动化变量是在运行时才有的。
而且，为了避免混乱，make不允许把整个条件语句分成两部分放在不同的文件中。
使用函数---- 
在Makefile中可以使用函数来处理变量，从而让我们的命令或是规则更为的灵活和具有智能。make所支持的函数也不算很多，不过已经足够我们的操作了。函数调用后，函数的返回值可以当做变量来使用。
一、函数的调用语法
函数调用，很像变量的使用，也是以“$”来标识的，其语法如下：
$( )
或是
${ }
这里，就是函数名，make支持的函数不多。是函数的参数，参数间以逗号“,”分隔，而函数名和参数之间以“空格”分隔。函数调用以“$”开头，以圆括号或花括号把函数名和参数括起。感觉很像一个变量，是不是？函数中的参数可以使用变量，为了风格的统一，函数和变量的括号最好一样，如使用“$(subst a,b,$(x))”这样的形式，而不是“$(subst a,b,${x})”的形式。因为统一会更清楚，也会减少一些不必要的麻烦。
还是来看一个示例：
comma:= ,
empty:=
space:= $(empty) $(empty)
foo:= a b c
bar:= $(subst $(space),$(comma),$(foo))
在这个示例中，$(comma)的值是一个逗号。$(space)使用了$(empty)定义了一个空格，$(foo)的值是“a b c”，$(bar)的定义用，调用了函数“subst”，这是一个替换函数，这个函数有三个参数，第一个参数是被替换字串，第二个参数是替换字串，第三个参数是替换操作作用的字串。这个函数也就是把$(foo)中的空格替换成逗号，所以$(bar)的值是“a,b,c”。
二、字符串处理函数
$(subst ,,) 
名称：字符串替换函数--subst。功能：把字串中的字符串替换成。返回：函数返回被替换过后的字符串。
示例：$(subst ee,EE,feet on the street)，把“feet on the street”中的“ee”替换成“EE”，返回结果是“fEEt on the strEEt”。
$(patsubst ,,) 
名称：模式字符串替换函数--patsubst。功能：查找中的单词（单词以“空格”、“Tab”或“回车”“换行”分隔）是否符合模式，如果匹配的话，则以替换。这里，可以包括通配符“%”，表示任意长度的字串。如果中也包含“%”，那么，中的这个“%”将是中的那个“%”所代表的字串。（可以用“\”来转义，以“\%”来表示真实含义的“%”字符）返回：函数返回被替换过后的字符串。
示例：
$(patsubst %.c,%.o,x.c.c bar.c)
把字串“x.c.c bar.c”符合模式[%.c]的单词替换成[%.o]，返回结果是“x.c.o bar.o”
备注：
这和我们前面“变量章节”说过的相关知识有点相似。如：
“$(var:=)”相当于“$(patsubst ,,$(var))”，
而“$(var: =)”则相当于“$(patsubst %,%,$(var))”。
例如有：objects = foo.o bar.o baz.o，那么，“$(objects:.o=.c)”和“$(patsubst %.o,%.c,$(objects))”是一样的。
$(strip )
名称：去空格函数--strip。功能：去掉字串中开头和结尾的空字符。返回：返回被去掉空格的字符串值。示例：$(strip a b c )
把字串“a b c ”去到开头和结尾的空格，结果是“a b c”。
$(findstring ,)
名称：查找字符串函数--findstring。功能：在字串中查找字串。返回：如果找到，那么返回，否则返回空字符串。示例：
$(findstring a,a b c)$(findstring a,b c)
第一个函数返回“a”字符串，第二个返回“”字符串（空字符串）
$(filter ,)
名称：过滤函数--filter。功能：以模式过滤字符串中的单词，保留符合模式的单词。可以有多个模式。返回：返回符合模式的字串。示例：
sources := foo.c bar.c baz.s ugh.hfoo: $(sources)cc $(filter %.c %.s,$(sources)) -o foo
$(filter %.c %.s,$(sources))返回的值是“foo.c bar.c baz.s”。
$(filter-out ,)
名称：反过滤函数--filter-out。功能：以模式过滤字符串中的单词，去除符合模式的单词。可以有多个模式。返回：返回不符合模式的字串。示例：
objects=main1.o foo.o main2.o bar.omains=main1.o main2.o$(filter-out $(mains),$(objects)) 返回值是“foo.o bar.o”。
$(sort )
名称：排序函数--sort。功能：给字符串中的单词排序（升序）。返回：返回排序后的字符串。示例：$(sort foo bar lose)返回“bar foo lose” 。备注：sort函数会去掉中相同的单词。
$(word ,)
名称：取单词函数--word。功能：取字符串中第个单词。（从一开始）返回：返回字符串中第个单词。如果比中的单词数要大，那么返回空字符串。示例：$(word 2, foo bar baz)返回值是“bar”。
$(wordlist ,,) 
名称：取单词串函数--wordlist。功能：从字符串中取从开始到的单词串。和是一个数字。返回：返回字符串中从到的单词字串。如果比中的单词数要大，那么返回空字符串。如果大于的单词数，那么返回从开始，到结束的单词串。示例： $(wordlist 2, 3, foo bar baz)返回值是“bar baz”。
$(words )
名称：单词个数统计函数--words。功能：统计中字符串中的单词个数。返回：返回中的单词数。示例：$(words, foo bar baz)返回值是“3”。备注：如果我们要取中最后的一个单词，我们可以这样：$(word $(words ),)。
$(firstword )
名称：首单词函数--firstword。功能：取字符串中的第一个单词。返回：返回字符串的第一个单词。示例：$(firstword foo bar)返回值是“foo”。备注：这个函数可以用word函数来实现：$(word 1,)。
以上，是所有的字符串操作函数，如果搭配混合使用，可以完成比较复杂的功能。这里，举一个现实中应用的例子。我们知道，make使用“VPATH”变量来指定“依赖文件”的搜索路径。于是，我们可以利用这个搜索路径来指定编译器对头文件的搜索路径参数CFLAGS，如：
override CFLAGS += $(patsubst %,-I%,$(subst :, ,$(VPATH)))
如果我们的“$(VPATH)”值是“src:../headers”，那么“$(patsubst %,-I%,$(subst :, ,$(VPATH)))”将返回“-Isrc -I../headers”，这正是cc或gcc搜索头文件路径的参数。
三、文件名操作函数
下面我们要介绍的函数主要是处理文件名的。每个函数的参数字符串都会被当做一个或是一系列的文件名来对待。
$(dir ) 
名称：取目录函数--dir。功能：从文件名序列中取出目录部分。目录部分是指最后一个反斜杠（“/”）之前的部分。如果没有反斜杠，那么返回“./”。返回：返回文件名序列的目录部分。示例： $(dir src/foo.c hacks)返回值是“src/ ./”。
$(notdir ) 
名称：取文件函数--notdir。功能：从文件名序列中取出非目录部分。非目录部分是指最后一个反斜杠（“/”）之后的部分。返回：返回文件名序列的非目录部分。示例： $(notdir src/foo.c hacks)返回值是“foo.c hacks”。$(suffix ) 名称：取后缀函数--suffix。功能：从文件名序列中取出各个文件名的后缀。返回：返回文件名序列的后缀序列，如果文件没有后缀，则返回空字串。示例：$(suffix src/foo.c src-1.0/bar.c hacks)返回值是“.c .c”。
$(basename )
名称：取前缀函数--basename。功能：从文件名序列中取出各个文件名的前缀部分。返回：返回文件名序列的前缀序列，如果文件没有前缀，则返回空字串。示例：$(basename src/foo.c src-1.0/bar.c hacks)返回值是“src/foo src-1.0/bar hacks”。
$(addsuffix ,) 
名称：加后缀函数--addsuffix。功能：把后缀加到中的每个单词后面。返回：返回加过后缀的文件名序列。示例：$(addsuffix .c,foo bar)返回值是“foo.c bar.c”。
$(addprefix ,) 
名称：加前缀函数--addprefix。功能：把前缀加到中的每个单词后面。返回：返回加过前缀的文件名序列。示例：$(addprefix src/,foo bar)返回值是“src/foo src/bar”。
$(join ,)
名称：连接函数--join。功能：把中的单词对应地加到的单词后面。如果的单词个数要比的多，那么，中的多出来的单词将保持原样。如果的单词个数要比多，那么，多出来的单词将被复制到中。返回：返回连接过后的字符串。示例：$(join aaa bbb , 111 222 333)返回值是“aaa111 bbb222 333”。
四、foreach 函数
foreach函数和别的函数非常的不一样。因为这个函数是用来做循环用的，Makefile中的foreach函数几乎是仿照于Unix标准Shell（/bin/sh）中的for语句，或是C-Shell（/bin/csh）中的foreach语句而构建的。它的语法是：
$(foreach ,,)
这个函数的意思是，把参数中的单词逐一取出放到参数所指定的变量中，然后再执行所包含的表达式。每一次会返回一个字符串，循环过程中，的所返回的每个字符串会以空格分隔，最后当整个循环结束时，所返回的每个字符串所组成的整个字符串（以空格分隔）将会是foreach函数的返回值。
所以，最好是一个变量名，可以是一个表达式，而中一般会使用这个参数来依次枚举中的单词。举个例子：
names := a b c d
files := $(foreach n,$(names),$(n).o)
上面的例子中，$(name)中的单词会被挨个取出，并存到变量“n”中，“$(n).o”每次根据“$(n)”计算出一个值，这些值以空格分隔，最后作为foreach函数的返回，所以，$(files)的值是“a.o b.o c.o d.o”。
注意，foreach中的参数是一个临时的局部变量，foreach函数执行完后，参数的变量将不在作用，其作用域只在foreach函数当中。
五、if 函数
if函数很像GNU的make所支持的条件语句--ifeq（参见前面所述的章节），if函数的语法是：
$(if ,) 
或是
$(if ,,)
可见，if函数可以包含“else”部分，或是不含。即if函数的参数可以是两个，也可以是三个。参数是if的表达式，如果其返回的为非空字符串，那么这个表达式就相当于返回真，于是，会被计算，否则会被计算。
而if函数的返回值是，如果为真（非空字符串），那个会是整个函数的返回值，如果为假（空字符串），那么会是整个函数的返回值，此时如果没有被定义，那么，整个函数返回空字串。
所以，和只会有一个被计算。
六、call函数
call函数是唯一一个可以用来创建新的参数化的函数。你可以写一个非常复杂的表达式，这个表达式中，你可以定义许多参数，然后你可以用call函数来向这个表达式传递参数。其语法是：
$(call ,,,...)
当make执行这个函数时，参数中的变量，如$(1)，$(2)，$(3)等，会被参数，，依次取代。而的返回值就是call函数的返回值。例如：
reverse = $(1) $(2)
foo = $(call reverse,a,b)
那么，foo的值就是“a b”。当然，参数的次序是可以自定义的，不一定是顺序的，如：
reverse = $(2) $(1)
foo = $(call reverse,a,b)
此时的foo的值就是“b a”。
七、origin函数
origin函数不像其它的函数，他并不操作变量的值，他只是告诉你你的这个变量是哪里来的？其语法是：
$(origin )
注意，是变量的名字，不应该是引用。所以你最好不要在中使用“$”字符。Origin函数会以其返回值来告诉你这个变量的“出生情况”，下面，是origin函数的返回值:
“undefined”
如果从来没有定义过，origin函数返回这个值“undefined”。
“default”
如果是一个默认的定义，比如“CC”这个变量，这种变量我们将在后面讲述。
“environment”
如果是一个环境变量，并且当Makefile被执行时，“-e”参数没有被打开。
“file”
如果这个变量被定义在Makefile中。
“command line”
如果这个变量是被命令行定义的。
“override”
如果是被override指示符重新定义的。
“automatic”
如果是一个命令运行中的自动化变量。关于自动化变量将在后面讲述。
这些信息对于我们编写Makefile是非常有用的，例如，假设我们有一个Makefile其包了一个定义文件Make.def，在Make.def中定义了一个变量“bletch”，而我们的环境中也有一个环境变量“bletch”，此时，我们想判断一下，如果变量来源于环境，那么我们就把之重定义了，如果来源于Make.def或是命令行等非环境的，那么我们就不重新定义它。于是，在我们的Makefile中，我们可以这样写：
ifdef bletch
ifeq "$(origin bletch)" "environment"
bletch = barf, gag, etc.
endif
endif
当然，你也许会说，使用override关键字不就可以重新定义环境中的变量了吗？为什么需要使用这样的步骤？是的，我们用override是可以达到这样的效果，可是override过于粗暴，它同时会把从命令行定义的变量也覆盖了，而我们只想重新定义环境传来的，而不想重新定义命令行传来的。
八、shell函数
shell函数也不像其它的函数。顾名思义，它的参数应该就是操作系统Shell的命令。它和反引号“`”是相同的功能。这就是说，shell函数把执行操作系统命令后的输出作为函数返回。于是，我们可以用操作系统命令以及字符串处理命令awk，sed等等命令来生成一个变量，如：
contents := $(shell cat foo)
files := $(shell echo *.c)
注意，这个函数会新生成一个Shell程序来执行命令，所以你要注意其运行性能，如果你的Makefile中有一些比较复杂的规则，并大量使用了这个函数，那么对于你的系统性能是有害的。特别是Makefile的隐晦的规则可能会让你的shell函数执行的次数比你想像的多得多。
九、控制make的函数
make提供了一些函数来控制make的运行。通常，你需要检测一些运行Makefile时的运行时信息，并且根据这些信息来决定，你是让make继续执行，还是停止。
$(error )
产生一个致命的错误，是错误信息。注意，error函数不会在一被使用就会产生错误信息，所以如果你把其定义在某个变量中，并在后续的脚本中使用这个变量，那么也是可以的。例如：
示例一：
ifdef ERROR_001
$(error error is $(ERROR_001))
endif
示例二：
ERR = $(error found an error!)
.PHONY: err
err: ; $(ERR)
示例一会在变量ERROR_001定义了后执行时产生error调用，而示例二则在目录err被执行时才发生error调用。
$(warning )
这个函数很像error函数，只是它并不会让make退出，只是输出一段警告信息，而make继续执行。
make 的运行------ 
一般来说，最简单的就是直接在命令行下输入make命令，make命令会找当前目录的makefile来执行，一切都是自动的。但也有时你也许只想让make重编译某些文件，而不是整个工程，而又有的时候你有几套编译规则，你想在不同的时候使用不同的编译规则，等等。本章节就是讲述如何使用make命令的。
一、make的退出码
make命令执行后有三个退出码：
0 -- 表示成功执行。1 -- 如果make运行时出现任何错误，其返回1。2 -- 如果你使用了make的“-q”选项，并且make使得一些目标不需要更新，那么返回2。
Make的相关参数我们会在后续章节中讲述。
二、指定Makefile
前面我们说过，GNU make找寻默认的Makefile的规则是在当前目录下依次找三个文件--“GNUmakefile”、“makefile”和“Makefile”。其按顺序找这三个文件，一旦找到，就开始读取这个文件并执行。
当前，我们也可以给make命令指定一个特殊名字的Makefile。要达到这个功能，我们要使用make的“-f”或是“--file”参数（“--makefile”参数也行）。例如，我们有个makefile的名字是“hchen.mk”，那么，我们可以这样来让make来执行这个文件：
make -f hchen.mk
如果在make的命令行是，你不只一次地使用了“-f”参数，那么，所有指定的makefile将会被连在一起传递给make执行。
三、指定目标
一般来说，make的最终目标是makefile中的第一个目标，而其它目标一般是由这个目标连带出来的。这是make的默认行为。当然，一般来说，你的makefile中的第一个目标是由许多个目标组成，你可以指示make，让其完成你所指定的目标。要达到这一目的很简单，需在make命令后直接跟目标的名字就可以完成（如前面提到的“make clean”形式）
任何在makefile中的目标都可以被指定成终极目标，但是除了以“-”打头，或是包含了“=”的目标，因为有这些字符的目标，会被解析成命令行参数或是变量。甚至没有被我们明确写出来的目标也可以成为make的终极目标，也就是说，只要make可以找到其隐含规则推导规则，那么这个隐含目标同样可以被指定成终极目标。
有一个make的环境变量叫“MAKECMDGOALS”，这个变量中会存放你所指定的终极目标的列表，如果在命令行上，你没有指定目标，那么，这个变量是空值。这个变量可以让你使用在一些比较特殊的情形下。比如下面的例子：
sources = foo.c bar.c
ifneq ( $(MAKECMDGOALS),clean)
include $(sources:.c=.d)
endif
基于上面的这个例子，只要我们输入的命令不是“make clean”，那么makefile会自动包含“foo.d”和“bar.d”这两个makefile。
使用指定终极目标的方法可以很方便地让我们编译我们的程序，例如下面这个例子：
.PHONY: all
all: prog1 prog2 prog3 prog4
从这个例子中，我们可以看到，这个makefile中有四个需要编译的程序--“prog1”， “prog2”， “prog3”和 “prog4”，我们可以使用“make all”命令来编译所有的目标（如果把all置成第一个目标，那么只需执行“make”），我们也可以使用“make prog2”来单独编译目标“prog2”。
即然make可以指定所有makefile中的目标，那么也包括“伪目标”，于是我们可以根据这种性质来让我们的makefile根据指定的不同的目标来完成不同的事。在Unix世界中，软件发布时，特别是GNU这种开源软件的发布时，其makefile都包含了编译、安装、打包等功能。我们可以参照这种规则来书写我们的makefile中的目标。
“all”这个伪目标是所有目标的目标，其功能一般是编译所有的目标。“clean”这个伪目标功能是删除所有被make创建的文件。“install”这个伪目标功能是安装已编译好的程序，其实就是把目标执行文件拷贝到指定的目标中去。“print”这个伪目标的功能是例出改变过的源文件。“tar”这个伪目标功能是把源程序打包备份。也就是一个tar文件。“dist”这个伪目标功能是创建一个压缩文件，一般是把tar文件压成Z文件。或是gz文件。“TAGS”这个伪目标功能是更新所有的目标，以备完整地重编译使用。“check”和“test”这两个伪目标一般用来测试makefile的流程。
当然一个项目的makefile中也不一定要书写这样的目标，这些东西都是GNU的东西，但是我想，GNU搞出这些东西一定有其可取之处（等你的UNIX下的程序文件一多时你就会发现这些功能很有用了），这里只不过是说明了，如果你要书写这种功能，最好使用这种名字命名你的目标，这样规范一些，规范的好处就是--不用解释，大家都明白。而且如果你的makefile中有这些功能，一是很实用，二是可以显得你的makefile很专业（不是那种初学者的作品）。
