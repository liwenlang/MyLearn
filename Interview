/***************************************************************
 * @file       面试考题
 * @brief      1.二分查找实现 2.atoi()底层实现 3.两个矩形最短距离实现(用到MFC库）
 * @author     liwenlang
 * @version    v1.0
 * @date       2020/4/24
 **************************************************************/

#include <iostream>
#include <ctype.h>
#include <stdlib.h>
#include "stdafx.h"
#include "Win32Project1.h"

CWinApp theApp;
using namespace std;

/***************************************************************
*  @brief     二分查找实现
*  @param     int arr[] 查找的int数组
*  @param     int left   左索引
*  @param     int right   右索引
*  @param     int element 要查找的元素
*  @return    int  返回该元素的索引
*  @note      未查找到则返回-1
**************************************************************/
int binary_search(int arr[], int left, int right, int element);

/***************************************************************
*  @brief     atoi()底层实现
*  @param     char ch[] 要转换的字符数组
*  @return    int  返回整型值
*  @note     
**************************************************************/
int my_atoi(char ch[]);

//3.两个矩形最短距离实现
////两个矩形的几何关系大致可分为如下几种:
//(1) 不相交，但在X或Y轴方向上有部分重合坐标，最小距离为两个矩形之间的最小平行距离或垂直距离
//(2) 不相交，在X和Y轴方向上均无重合坐标，此时最小距离为两矩形距离最近的两个顶点之间的距离
//(3) 相交，此时距离为负数

/***************************************************************
*  @brief     两个矩形最短距离实现
*  @param     CRect rect1 矩形1
*  @param     CRect rect2 矩形2
*  @return    double  返回最小距离
*  @note     
**************************************************************/
double rect_min_dist(CRect rect1, CRect rect2);

void MyTest()
{
	//std::cout << "Hello World!\n";

	//Test1:
	//int numbers[] = { 1, 9, 13, 24, 25, 36, 77 };
	//int index = binary_search(numbers, 0, 6, 9);
	//printf("index = %d", index);

	//Test2:
	//char ch[20] = "-1234";
	//int nRtn = my_atoi(ch);
	//printf("index = %d", nRtn);

	//Test3:
	CRect rect1(0, 0, 5, 5);
	CRect rect2(8, 8, 10, 10);
	double dist = rect_min_dist(rect1, rect2);
	//printf("index = %f", dist);

}

int main()
{
    int nRetCode = 0;

    HMODULE hModule = ::GetModuleHandle(nullptr);

    if (hModule != nullptr)
    {
        // 初始化 MFC 并在失败时显示错误
        if (!AfxWinInit(hModule, nullptr, ::GetCommandLine(), 0))
        {
            // TODO: 更改错误代码以符合您的需要
            wprintf(L"错误: MFC 初始化失败\n");
            nRetCode = 1;
        }
		else
		{
			MyTest();

		}
    }
   

    return nRetCode;
}


int binary_search(int arr[], int left, int right, int element)
{
	while (left <= right)
	{
		int mid = (left + right) / 2;
		if (arr[mid] > element)
		{
			right = mid - 1;
		}
		else if (arr[mid] < element)
		{
			left = mid + 1;
		}
		else
		{
			return mid;
		}
	}

	return -1;
}

int my_atoi(char ch[])
{
	int index = 0;
	int number = 0;
	int sign = 1; //符号位

	for (; isspace(ch[index]); ++index);   //
	{
		sign = (ch[index] == '-') ? -1 : 1;
	}

	if (ch[index] == '+' || ch[index] == '-')     //跳过符号位
	{
		++index;
	}

	for (; isdigit(ch[index]); ++index)
	{
		number = 10 * number + (ch[index] - '0');    //将数字字符转换成整形数字
	}

	return sign * number;
}


//
double rect_min_dist(CRect rect1, CRect rect2)
{
	double min_dist;

	//首先计算两个矩形中心点
	CPoint pt1, pt2;
	pt1.x = rect1.left + (rect1.Width() / 2);
	pt1.y = rect1.bottom + (rect1.Height() / 2);
	pt2.x = rect2.left + (rect2.Width() / 2);
	pt2.y = rect2.bottom + (rect2.Height() / 2);

	// 分别计算两矩形中心点在X轴和Y轴方向的距离
	double dis_x = abs(pt2.x - pt1.x);
	double dis_y = abs(pt2.y - pt1.y);

	//两矩形不相交，在X轴方向有部分重合的两个矩形，最小距离是上矩形的下边线与下矩形的上边线之间的距离
	if ((dis_x < ((rect1.Width() + rect2.Width()) / 2)) && (dis_y >= ((rect1.Height() + rect2.Height()) / 2)))
	{
		min_dist = dis_y - ((rect1.Height() + rect2.Height()) / 2);
	}

	//两矩形不相交，在Y轴方向有部分重合的两个矩形，最小距离是左矩形的右边线与右矩形的左边线之间的距离
	else if ((dis_x >= ((rect1.Width() + rect2.Width()) / 2)) && (dis_y < ((rect1.Height() + rect2.Height()) / 2)))
	{
		min_dist = dis_x - ((rect1.Width() + rect2.Width()) / 2);
	}

	//两矩形不相交，在X轴和Y轴方向无重合的两个矩形，最小距离是距离最近的两个顶点之间的距离，
	// 利用勾股定理，算出这一距离
	else if ((dis_x >= ((rect1.Width() + rect2.Width()) / 2)) && (dis_y >= ((rect1.Height() + rect2.Height()) / 2)))
	{
		double delta_x = dis_x - ((rect1.Width() + rect2.Width()) / 2);
		double delta_y = dis_y - ((rect1.Height() + rect2.Height()) / 2);
		min_dist = sqrt(delta_x * delta_x + delta_y * delta_y);
	}

	//两矩形相交，最小距离为负值，返回-1
	else
	{
		min_dist = -1;
	}

	return min_dist;
}
